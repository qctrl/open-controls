name: Push workflow

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*.*'

jobs:

  housekeeping:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Perform housekeeping checks
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci docker run qctrl/python-build:3.7 /scripts/housekeeping.sh

  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Install Python dependencies
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci docker run qctrl/ci-images:python-3.7-ci /scripts/install-python-dependencies.sh
    - name: Run Pre-Commit
      run: |
        ./ci docker run qctrl/ci-images:python-3.7-ci poetry run pre-commit run -- -a

  pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.6, 3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v1
    - name: Install Python dependencies
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci docker run qctrl/ci-images:python-${{ matrix.python }}-ci /scripts/install-python-dependencies.sh
    - name: Run Pytest
      run: |
        ./ci docker run qctrl/ci-images:python-${{ matrix.python }}-ci /scripts/pytest.sh

  publish_internally:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Publish development version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci docker run qctrl/python-build:3.7 /scripts/publish-dev-version.sh

  sphinx_documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Sphinx Image and Push to DockerHub
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci vault get -t $(cat .token) -p secret/data/dockerhub -k hub_user -o .hub_user
        ./ci vault get -t $(cat .token) -p secret/data/dockerhub -k hub_pass -o .hub_pass
        ./ci docker buildPush \
          -f ./docs/Dockerfile \
          -u $(cat .hub_user) \
          -p $(cat .hub_pass) \
          --suffix -docs
    - name: Update Sphinx deployment in Kubernetes (Development)
      if: github.ref == 'refs/heads/master'
      run: |
        ./ci vault awsKey -t $(cat .token) -r deploy-eks-dev -o ./.aws-credentials
        ./ci docker run qctrl/ci-images:google-cloud-sdk-ci sh -- -c '
          . ./.aws-credentials;
          aws eks update-kubeconfig --alias hidden --name platform-dev2 --region us-east-1;
          kubectl -n qctrl-platform set image deployment/python-open-controls-docs python-open-controls-docs=qctrl/python-open-controls-docs:$COMMIT && kubectl -n qctrl-platform rollout status deployment/python-open-controls-docs;
        '
