name: Push workflow

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*.*'

jobs:

  housekeeping:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Perform housekeeping checks
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}        
        ./ci docker run qctrl/python-build:3.7 /scripts/housekeeping.sh

  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Install Python dependencies
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci docker run qctrl/python-build:3.7 /scripts/install-python-dependencies.sh
    - name: Run Pylint
      run: |
        ./ci docker run qctrl/python-build:3.7 poetry run pylint_runner || true
    - name: Run Pylama
      run: |
        ./ci docker run qctrl/python-build:3.7 poetry run pylama || true
    - name: Run Markdownlint
      run: |
        ./ci docker run qctrl/python-build:3.7 mdl -- -ig . || true

  pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v1
    - name: Install Python dependencies
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci docker run qctrl/python-build:${{ matrix.python }} /scripts/install-python-dependencies.sh
    - name: Run Pytest
      run: |
        ./ci docker run qctrl/python-build:${{ matrix.python }} /scripts/pytest.sh

  publish_internally:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Publish development version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci docker run qctrl/python-build:3.7 /scripts/publish-dev-version.sh

  sphinx_documentation:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Sphinx Image
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci vault get -t $(cat .token) -p secret/data/dockerhub -k hub_user -o .hub_user
        ./ci vault get -t $(cat .token) -p secret/data/dockerhub -k hub_pass -o .hub_pass
        ./ci docker build \
          -f ./docs/Dockerfile \
          -t qctrl/python-open-controls-docs:development
    - name: Push Sphinx Image to Dockerhub
      run: |
        ./ci docker push \
          -u $(cat .hub_user) \
          -p $(cat .hub_pass) \
          qctrl/python-open-controls-docs:development

  sphinx_documentation_test:
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build Sphinx Image and Push to DockerHub
      run: |
        source <(curl -sL http://ci.q-ctrl.com)
        ./ci vault login -r ${{ secrets.VAULT_ROLE_ID }} -s ${{ secrets.VAULT_SECRET_ID }}
        ./ci vault get -t $(cat .token) -p secret/data/dockerhub -k hub_user -o .hub_user
        ./ci vault get -t $(cat .token) -p secret/data/dockerhub -k hub_pass -o .hub_pass
        ./ci docker buildPush \
          -f ./docs/Dockerfile \
          -u $(cat .hub_user) \
          -p $(cat .hub_pass) \
          --suffix -docs